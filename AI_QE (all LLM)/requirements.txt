# requirements.txt
# Really Smart Review - Dependencies

# Core LLM Integration
openai>=1.12.0

# XML Processing (CRITICAL - must use lxml for namespace preservation)
lxml>=4.9.0

# PDF Report Generation
reportlab>=4.0.9

# Data Visualization
matplotlib>=3.8.2
numpy>=1.26.3

# Environment Management (recommended)
python-dotenv>=1.0.0

# Installation Instructions:
# pip install -r requirements.txt
#
# Or install individually:
# pip install openai lxml reportlab matplotlib numpy python-dotenv

"""
QUICK START GUIDE
=================

1. INSTALL DEPENDENCIES
   pip install -r requirements.txt
   
   OR manually:
   pip install openai lxml reportlab matplotlib numpy python-dotenv

2. CREATE PROJECT STRUCTURE
   really-smart-review/
   ├── really_smart_review.py
   ├── .env (optional - for API key)
   ├── core/
   │   ├── __init__.py
   │   ├── config.py
   │   ├── xliff_handler.py
   │   ├── async_llm_provider.py
   │   ├── api_cache.py
   │   └── analyzer.py
   ├── prompts/
   │   ├── __init__.py
   │   └── templates.py
   └── reports/
       ├── __init__.py
       └── enhanced_report.py

3. CREATE __init__.py FILES
   # In each folder (core/, prompts/, reports/)
   # Create empty __init__.py files
   
   Unix/Mac:
   touch core/__init__.py prompts/__init__.py reports/__init__.py
   
   Windows PowerShell:
   New-Item -ItemType File core\__init__.py
   New-Item -ItemType File prompts\__init__.py
   New-Item -ItemType File reports\__init__.py
   
   Windows CMD:
   type nul > core\__init__.py
   type nul > prompts\__init__.py
   type nul > reports\__init__.py

4. GET OPENAI API KEY
   - Go to: https://platform.openai.com/api-keys
   - Create new API key
   - Copy it (starts with 'sk-')
   
   Option A: Create .env file (recommended)
   Create a file named .env in the project root:
   OPENAI_API_KEY=sk-your-actual-api-key-here
   
   Option B: Set environment variable
   Unix/Mac:  export OPENAI_API_KEY="sk-your-key-here"
   Windows:   set OPENAI_API_KEY=sk-your-key-here

5. RUN THE TOOL
   # Interactive mode (recommended first time)
   python really_smart_review.py
   
   # Command line with folder path
   python really_smart_review.py /path/to/xliff/folder
   
   # With saved configuration
   python really_smart_review.py /path/to/xliff/folder config.json

6. CHECK RESULTS
   Results are saved in: your-folder/smart_review_results/
   - Annotated XLIFF files: *.sdlxliff (with QE comments)
   - PDF report: smart_review_report.pdf
   - Analysis data: analysis_data.json
   - Charts: charts/ folder (temporary)

TESTING THE INSTALLATION
=========================

Test script (save as test_install.py):
"""

def test_installation():
    """Quick test to verify all components are working."""
    import sys
    
    print("Testing Really Smart Review Installation...")
    print("=" * 60)
    
    # Test 1: Import dependencies
    print("\n1. Testing dependencies...")
    try:
        import openai
        print(f"   ✓ OpenAI (version: {openai.__version__})")
    except ImportError:
        print("   ✗ OpenAI missing - run: pip install openai")
        return False
    
    try:
        from lxml import etree
        print(f"   ✓ lxml (CRITICAL for XLIFF namespace handling)")
    except ImportError:
        print("   ✗ lxml missing - run: pip install lxml")
        print("   WARNING: lxml is REQUIRED for proper XLIFF file handling!")
        return False
    
    try:
        from reportlab.lib.pagesizes import A4
        print("   ✓ ReportLab")
    except ImportError:
        print("   ✗ ReportLab missing - run: pip install reportlab")
        return False
    
    try:
        import matplotlib.pyplot as plt
        print("   ✓ Matplotlib")
    except ImportError:
        print("   ✗ Matplotlib missing - run: pip install matplotlib")
        return False
    
    try:
        import numpy
        print("   ✓ NumPy")
    except ImportError:
        print("   ✗ NumPy missing - run: pip install numpy")
        return False
    
    try:
        from dotenv import load_dotenv
        print("   ✓ python-dotenv")
    except ImportError:
        print("   ⚠ python-dotenv missing (optional)")
    
    # Test 2: Import core modules
    print("\n2. Testing core modules...")
    try:
        from core import config, xliff_handler, analyzer
        print("   ✓ Core modules (config, xliff_handler, analyzer)")
    except ImportError as e:
        print(f"   ✗ Core modules error: {e}")
        print("   Make sure __init__.py exists in core/ folder")
        return False
    
    try:
        from core.async_llm_provider import AsyncOpenAIProvider
        print("   ✓ Async LLM provider")
    except ImportError as e:
        print(f"   ✗ Async provider error: {e}")
        print("   Make sure async_llm_provider.py exists in core/")
        return False
    
    try:
        from core.api_cache import APICredentialCache
        print("   ✓ API credential cache")
    except ImportError as e:
        print(f"   ✗ API cache error: {e}")
        print("   Make sure api_cache.py exists in core/")
        return False
    
    try:
        from prompts import templates
        print("   ✓ Prompt templates")
    except ImportError as e:
        print(f"   ✗ Prompt templates error: {e}")
        print("   Make sure __init__.py exists in prompts/ folder")
        return False
    
    try:
        from reports import enhanced_report
        print("   ✓ Report generator")
    except ImportError as e:
        print(f"   ✗ Report generator error: {e}")
        print("   Make sure __init__.py exists in reports/ folder")
        return False
    
    # Test 3: Check API key
    print("\n3. Checking OpenAI API key...")
    import os
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except:
        pass
    
    api_key = os.getenv('OPENAI_API_KEY')
    if api_key:
        if api_key.startswith('sk-'):
            print(f"   ✓ API key found (starts with: {api_key[:8]}...)")
        else:
            print("   ⚠ API key found but doesn't start with 'sk-'")
    else:
        print("   ⚠ No API key in environment or .env file")
        print("   Set it in .env file or with: export OPENAI_API_KEY='sk-your-key'")
    
    # Test 4: Quick functionality test
    print("\n4. Testing basic functionality...")
    try:
        from core.config import get_default_config
        config = get_default_config()
        print("   ✓ Configuration system")
    except Exception as e:
        print(f"   ✗ Configuration error: {e}")
        return False
    
    try:
        from prompts.templates import PromptTemplateManager
        manager = PromptTemplateManager()
        template = manager.get_template('general')
        print("   ✓ Prompt templates")
    except Exception as e:
        print(f"   ✗ Template error: {e}")
        return False
    
    try:
        from core.api_cache import APICredentialCache
        cache = APICredentialCache()
        print("   ✓ API credential cache")
    except Exception as e:
        print(f"   ✗ API cache error: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("✓ Installation test complete!")
    print("\nYou're ready to use Really Smart Review")
    print("Run: python really_smart_review.py")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    import sys
    success = test_installation()
    sys.exit(0 if success else 1)

"""
SYSTEM REQUIREMENTS
===================

Python Version: 3.8 or higher (tested on 3.12.6)
OpenAI API: Tier 1+ recommended (10,000 RPM rate limit)

Rate Limits by Tier:
- Free:   3 RPM (not recommended for batch processing)
- Tier 1: 500 RPM (adequate for small batches)
- Tier 2: 5,000 RPM (recommended for production use)

The system uses 50 concurrent requests by default.
For Free tier, reduce max_concurrent in really_smart_review.py to 2.

PERFORMANCE CHARACTERISTICS
============================

With default settings (50 concurrent requests, gpt-5-mini):
- 250 segments: ~30-60 seconds
- 1000 segments: ~2-4 minutes
- 5000 segments: ~10-20 minutes

Cost (approximate, gpt-5-mini):
- Per 1000 segments: $0.50-$2.00
- Optimizations reduce token usage by ~80%

TROUBLESHOOTING
===============

Problem: "ModuleNotFoundError: No module named 'core'"
Solution: Make sure you have __init__.py files in all folders
          and you're running from the project root directory

Problem: "ModuleNotFoundError: No module named 'lxml'"
Solution: pip install lxml
          CRITICAL: lxml is required, xml.etree.ElementTree will NOT work

Problem: "ModuleNotFoundError: No module named 'openai'"
Solution: pip install openai>=1.12.0

Problem: "AuthenticationError" when running
Solution: Check your API key is correct and has credit
          Test with: 
          python -c "from openai import OpenAI; OpenAI(api_key='sk-...').models.list()"

Problem: Trados error opening SDLXLIFF: "Comments was not expected"
Solution: This was a namespace issue, fixed in current version using lxml
          Make sure you're using lxml, not xml.etree.ElementTree

Problem: Script runs but no output
Solution: Check the folder path contains .sdlxliff files
          Ensure files have both source and target segments

Problem: "Rate limit exceeded"
Solution: System will auto-retry with exponential backoff
          For Free tier: reduce max_concurrent to 2-3
          For large batches: upgrade OpenAI tier or process fewer files

Problem: TypeError: 'NoneType' is not JSON serializable
Solution: Fixed in current version - tree objects now filtered before JSON export

Problem: Files taking very long to process
Solution: Current version is optimized with:
          - 50 concurrent requests (40-60x faster)
          - Reduced context windows (~75% token savings)
          - Adaptive token limits (~80% cost reduction)
          Check your rate limits aren't being hit

GETTING HELP
============

1. Read the README.md for detailed documentation
2. Run the test_install.py script above
3. Verify your API key at: https://platform.openai.com/account/api-keys
4. Check OpenAI usage/limits at: https://platform.openai.com/usage
5. Review error logs in Trados: sdlerror-*.xml files

RECENT CHANGES
==============

Version 2.0 (Performance Optimized):
- NEW: Async processing with 50 concurrent requests (40-60x faster)
- NEW: API credential caching (skip validation on repeat runs)
- NEW: Adaptive token limits based on segment complexity
- NEW: Optimized context windows (source-only, truncated)
- FIXED: Namespace corruption in SDLXLIFF files (migrated to lxml)
- FIXED: TypeError on None scores in reports
- FIXED: JSON serialization errors with tree objects
- CHANGED: Now requires lxml package (CRITICAL)
"""